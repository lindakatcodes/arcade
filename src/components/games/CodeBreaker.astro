---

---

<div class="cb-main">
  <div>
    <p class="final-result">????</p>
    <p class="message"></p>
  </div>

  <form class="guessing-form">
    <input type="hidden" id="attempt-count" value="0" />
    <input type="hidden" id="answer" />
    <input type="number" id="user-guess" />
    <button id="form-button">Submit Guess</button>
  </form>

  <div class="results">
    <p><strong>Guess</strong></p>
    <p><strong>Result</strong></p>
    <div class="text-guess"></div>
    <div class="icon-guess"></div>
  </div>
</div>

<script is:inline>
  // @ts-nocheck
  // all the query selectors + game state variable
  let answer = document.querySelector("#answer");
  let attemptCount = document.querySelector("#attempt-count");
  let userInput = document.querySelector("#user-guess");
  let finalResult = document.querySelector(".final-result");
  let message = document.querySelector(".message");
  let guessesBox = document.querySelector(".text-guess");
  let encodedGuessesBox = document.querySelector(".icon-guess");
  let formBtn = document.querySelector("#form-button");
  let gameComplete = false;

  // event listeners
  formBtn?.addEventListener("click", (e) => {
    gameComplete ? resetGame() : guess(e);
  });

  // helper functions
  function resetGame() {
    finalResult.innerHTML = "????";
    finalResult.classList.remove("success", "error");
    message.innerHTML = "";
    message.classList.remove("success", "error");
    attemptCount.value = "0";
    userInput.value = "";
    userInput.disabled = false;
    formBtn.innerText = "Submit Guess";
    guessesBox.innerHTML = "";
    encodedGuessesBox.innerHTML = "";
    gameComplete = false;
    generateNewCode();
  }

  function generateNewCode() {
    answer.value = Math.floor(Math.random() * 9999).toString();
    // if the random number is not 4 values long, pad the front with zeroes
    while (answer.value.length < 4) {
      answer.value = "0" + answer.value;
    }
  }

  function setMessage(text, type) {
    message.innerHTML = text;
    if (type) {
      if (type === "success") {
        message.classList.add("success");
        message.classList.remove("error");
      } else if (type === "error") {
        message.classList.add("error");
        message.classList.remove("success");
      }
    }
  }

  function validateInputLength(param) {
    if (param.length === 4) {
      return true;
    } else {
      setMessage("Guesses must be exactly 4 numbers long.", "error");
      return false;
    }
  }

  function showAnswer(classname) {
    finalResult.innerHTML = answer.value;
    finalResult.classList.add(classname);
  }

  // show the user a visual of their last guess and which numbers are in which position
  function setResultDetails(userGuess) {
    const right = `✔`;
    const mixed = `⇄`;
    const wrong = `✘`;

    const rightAnswer = answer.value;
    let encodedAnswer = document.createElement("p");
    const regularAnswer = document.createElement("p");
    regularAnswer.innerHTML = userGuess;

    for (let i = 0; i < 4; i++) {
      let current = userGuess.charAt(i);
      if (rightAnswer.charAt(i) === current) {
        encodedAnswer.innerHTML += right;
      } else if (rightAnswer.includes(current)) {
        encodedAnswer.innerHTML += mixed;
      } else {
        encodedAnswer.innerHTML += wrong;
      }
    }

    guessesBox.append(regularAnswer);
    encodedGuessesBox.append(encodedAnswer);
  }

  function hasCorrectAnswer(userGuess) {
    let correctNumbers = 0;
    const rightAnswer = answer.value;

    for (let i = 0; i < 4; i++) {
      let current = userGuess.charAt(i);
      if (rightAnswer.charAt(i) === current) {
        correctNumbers++;
      }
    }

    if (correctNumbers === 4) {
      return true;
    } else {
      return false;
    }
  }

  function endGame() {
    userInput.disabled = true;
    formBtn.innerText = "Play Again?";
    gameComplete = true;
  }

  // main game function
  function guess(e) {
    e.preventDefault();

    // break early if the input length isn't right; otherwise add an attempt
    let attempts = Number(attemptCount.value);
    if (!validateInputLength(userInput.value)) {
      return false;
    } else {
      attempts += 1;
    }

    // add the guess result to the board
    setResultDetails(userInput.value);
    const guessIsRight = hasCorrectAnswer(userInput.value);
    attemptCount.value = attempts.toString();

    // show a message and update the board based on the result
    if (guessIsRight) {
      setMessage("You Win! :)", "success");
      showAnswer("success");
      endGame();
    } else if (!guessIsRight && attempts === 10) {
      setMessage("You Lose! :(", "error");
      showAnswer("error");
      endGame();
    } else {
      setMessage("Incorrect, please try again.");
    }

    userInput.value = "";
  }

  // run this at the start so we always start with a code to guess
  generateNewCode();
</script>

<style>
  .cb-main {
    display: grid;
    align-items: center;
    justify-items: center;
    font-size: 1rem;
    color: var(--c-black);
    padding: 0.5rem;
  }

  .final-result {
    font-size: 32px;
    text-align: center;
    font-weight: bold;
  }

  .error {
    color: #d9534f;
  }

  .success {
    color: #5cb85c;
  }

  .message {
    font-weight: bold;
    text-align: center;
    height: 0.8rem;
    font-size: 0.8rem;
  }

  .guessing-form {
    text-align: center;
    margin: 0.75rem 0;
  }

  input {
    width: 45%;
    padding: 0.25rem;
  }

  button {
    padding: 0.25rem 0.5rem;
    margin-left: 0.5rem;
  }

  .results {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1.2rem 1fr;
    column-gap: 2.5rem;
    margin: 0 auto;
    text-align: center;
    height: 18.75rem;
  }
</style>
